generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  name       String
  email      String    @unique
  password   String
  status     Boolean
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  friendshipsSent     Friendship[] @relation("friendshipsSent")
  friendshipsReceived Friendship[] @relation("friendshipsReceived")

  accounts Account[]

  @@map("customers")
}

model Friendship {
  id         Int              @id @default(autoincrement())
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  senderId   Int
  receiverId Int

  sender   Customer @relation("friendshipsSent", fields: [senderId], references: [id])
  receiver Customer @relation("friendshipsReceived", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Account {
  id         Int      @id @default(autoincrement())
  customerId Int      @unique
  balance    Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer     Customer      @relation(fields: [customerId], references: [id])
  transactions Transaction[]

  @@map("accounts")
}

model Transaction {
  id          Int             @id @default(autoincrement())
  accountId   Int
  type        TransactionType // (ENTRADA, CREDITO, DEBITO, PIX)
  amount      Float
  description String?
  createdAt   DateTime        @default(now())

  account Account @relation(fields: [accountId], references: [id])

  @@map("transactions")
}

enum TransactionType {
  ENTRADA // Receita ou recebimento de dinheiro
  CREDITO // Gastos com cartão de crédito
  DEBITO // Gastos com cartão de débito
  PIX // Gastos via PIX
}
